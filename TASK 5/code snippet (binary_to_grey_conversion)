    #include <stdio.h>
    #include <ch32v00x.h>

    void GPIO_Config(void) {
       GPIO_InitTypeDef GPIO_InitStructure = {0};
       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);


       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
       GPIO_Init(GPIOD, &GPIO_InitStructure);

    
      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_3;
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
      GPIO_Init(GPIOC, &GPIO_InitStructure);
    }

    int xor(int bit1, int bit2) {
      return bit1 ^ bit2;
    }

    int main(void) {
       uint8_t B, G[3];
       GPIO_Config();

        while (1) {
            B = GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_4) << 2 | 
            GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_5) << 1 | 
            GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_6);

            G[2] = (B >> 2) & 1;
            G[1] = xor((B >> 2) & 1, (B >> 1) & 1);
            G[0] = xor((B >> 1) & 1, B & 1);

            GPIO_WriteBit(GPIOC, GPIO_Pin_0, G[2] ? RESET : SET);
            GPIO_WriteBit(GPIOC, GPIO_Pin_2, G[1] ? RESET : SET);
            GPIO_WriteBit(GPIOC, GPIO_Pin_3, G[0] ? RESET : SET);
       }
    }
---
